package asd.bankapp.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import mum.asd.fw.common.Functor;
import mum.asd.fw.common.Predicate;
import mum.asd.fw.dao.IAddressDao;
import mum.asd.fw.party.Address;

public class HSqlAddressDao implements IAddressDao {

	private Connection connection;

	public HSqlAddressDao(Connection connection) {
		this.connection = connection;
	}

	public void insert(Address t) throws SQLException {
		// TODO Auto-generated method stub

		String query = " insert into ADDRESS" + " values (?, ?, ?, ?, ?)";

		// create the hsqldb insert preparedstatement
		PreparedStatement preparedStmt = connection.prepareStatement(query,
				Statement.RETURN_GENERATED_KEYS);
		preparedStmt.setInt(1, t.getCustomer().getId());
		preparedStmt.setString(2, t.getCity());
		preparedStmt.setString(3, t.getState());
		preparedStmt.setString(4, t.getStreet());
		preparedStmt.setInt(5, t.getZip());

		// execute the preparedstatement

		preparedStmt.executeUpdate();

		// Get the value of autogenerated key in the database
		ResultSet keyResultSet = preparedStmt.getGeneratedKeys();
		int newAddressId = 0;
		if (keyResultSet.next()) {
			newAddressId = (int) keyResultSet.getInt(1);
		}

		// Assign autogenerated keys to the object
		// t.setAddressID(newAddressId);
		preparedStmt.close();

	}

	public void update(Address t) throws SQLException {
		// TODO Auto-generated method stub

		String query = " UPDATE ADDRESS set city = ?, state = ?, street = ?, zip = ? where ADDRESS_ID = ?";

		// create the hsqldb insert preparedstatement
		PreparedStatement preparedStmt = connection.prepareStatement(query);
		preparedStmt.setInt(5, t.getCustomer().getId());
		preparedStmt.setString(1, t.getCity());
		preparedStmt.setString(2, t.getState());
		preparedStmt.setString(3, t.getStreet());
		preparedStmt.setInt(4, t.getZip());

		// execute the preparedstatement
		preparedStmt.executeUpdate();
		preparedStmt.close();

	}

	public void delete(Integer id) throws SQLException {
		// TODO Auto-generated method stub

		String query = " DELETE from ADDRESS where ADDRESS_ID = ?";

		// create the hsqldb insert preparedstatement
		PreparedStatement preparedStmt = connection.prepareStatement(query);
		preparedStmt.setInt(1, id);

		// execute the preparedstatement
		preparedStmt.executeUpdate();
		preparedStmt.close();

	}

	public Address getById(Integer id) throws SQLException {
		// TODO Auto-generated method stub

		String query = " SELECT * from ADDRESS where CUSTOMER_ID = ?";

		// create the hsqldb insert preparedstatement
		PreparedStatement preparedStmt = connection.prepareStatement(query);
		preparedStmt.setInt(1, id);

		// execute the preparedstatement
		ResultSet rs = preparedStmt.executeQuery();

		Address address = new Address(null, null, null, null);
		while (rs.next()) {
			address.setStreet(rs.getString(2));
			address.setCity(rs.getString(3));
			address.setState(rs.getString(4));
			address.setZip(rs.getInt(5));
		}
		preparedStmt.close();

		return address;
	}

	public List<Address> getAll() throws SQLException {
		// TODO Auto-generated method stub

		List<Address> lstAddress = new ArrayList<Address>();
		String query = " SELECT * from ADDRESS";
		PreparedStatement preparedStmt = connection.prepareStatement(query);
		ResultSet rs = preparedStmt.executeQuery();
		Address address = new Address(null, null, null, null);
		while (rs.next()) {
			address.setStreet(rs.getString(2));
			address.setCity(rs.getString(3));
			address.setState(rs.getString(4));
			address.setZip(rs.getInt(5));
			lstAddress.add(address);
		}

		return lstAddress;
	}

	public <R> void doAll(Functor<Address, R> func, Predicate<Address> p)
			throws SQLException {
		// TODO Auto-generated method stub

	}

}
